{
  "Advanced/Advanced.html": {
    "href": "Advanced/Advanced.html",
    "title": "Advanced samples | World Locking Tools Samples Documentation",
    "keywords": "Advanced samples This is the home for advanced samples of the use of World Locking Tools for Unity (WLT). An \"advanced\" sample should meet one or more of the following characteristics: Demonstrates the use of a lesser used WLT feature. Uses WLT along with an external library/system in a way that enhances the value of both. Accomplishes an otherwise difficult scenario using WLT in a novel way. Clarifies an otherwise difficult to grasp WLT concept via a concrete example. The following samples are currently available. Align Sub Scene - Multiple subspaces aligned independently. QR Space Pins - Printed QR codes used as external markers to align the Unity coordinate space with the physical world."
  },
  "Advanced/AlignSubScene/AlignSubScene.html": {
    "href": "Advanced/AlignSubScene/AlignSubScene.html",
    "title": "Align Sub Scene | World Locking Tools Samples Documentation",
    "keywords": "Align Sub Scene Summary: An independent AlignmentManager is created and maintained to pin a subset of the scene independently from the alignment of the global Unity coordinate space. Why that is useful In its most general and powerful usage, World Locking Tools for Unity (WLT) is used to world-lock and pin the entire Unity coordinate system to a known relationship with the physical world. There are situations in which it is preferable to pin a subset of the scene, represented by a subtree in the scene hierarchy. This subtree can be independently pinned, and will independently adjust to maintain optimal alignment at its space pins. The accompanying video tries to make the distinction between pinning the model's coordinate space at strategic points versus manipulating the model into a new position and orientation. Project source assets https://github.com/microsoft/MixedReality-WorldLockingTools-Samples/tree/master/Advanced/AlignSubScene Dependencies: Built on WLT version 1.2.1. Built with MRTK version v2.5.1. Built with Unity 2019.4.2f1. No further dependencies. Additional setup: No special setup is required, but to fully experience it, you should set up some sort of proxy in your physical space. Take the relative distances between the space pins in the model, and put physical markers in your scene matching those dimensions (e.g. bits of masking tape). If necessary or convenient, the relative positions of the space pins can be changed to better fit your physical environment. Running the sample: On startup, the nose of the space craft will be stuck in your head (at the origin). Take a step back. Grab any of the spheres and drag it into position to move the model's coordinate space. After positioning the first sphere, try to keep the other sphere's in a plausible new position as you move them. For that, having a physical proxy setup to give target to your sphere movements is helpful. Click on the physical environment to place placards. The WLT system will keep them bound to the physical environment. TwoIndependentSpaces.unity This scene takes the SpacePin feature a step further, using them to align multiple independent spaces within the scene. Note the use of the SpacePinVisualizer prefabs in the scene under the Visualizers object. There is one for each of the local (AlignSubTree) alignment managers, and one to visualize the global SpacePins. Special controls: At any time, clicking on the scene (but not the model) will place a placard into the scene. The placard will be put in Unity global space, so will be unaffected by manipulations of the model's space. Clicking on a placard will delete it."
  },
  "Advanced/Mobile/ARCore/ARCore.html": {
    "href": "Advanced/Mobile/ARCore/ARCore.html",
    "title": "Direct to ARCore | World Locking Tools Samples Documentation",
    "keywords": "Direct to ARCore Summary: This sample codes directly to Google's ARCore SDK for Unity. Dependencies: Built on WLT version 1.2.1. Incompatible with MRTK Built on Unity v2019.4.15f. Built on ARCore Unity SDK v1.22.0. Uses Frozen World Engine DLL v1.0.0 or later. Additional setup: Building the sample requires installing Google's ARCore Unity SDK v1.22.0 or later, including dependencies. These notes are intended to be helpful in setting up ARCore Unity SDK, but are no substitute for the official full documentation, which can be found at the following: https://developers.google.com/ar/develop/unity/quickstart-android The instructions here are trying to be brief. If anything is unclear, please refer to the full documentation for details. Installing dependencies From Unity Package Manager, install: Multiplayer HLAPI XR Legacy Input Helpers Installing ARCore Unity SDK Download the ARCore Unity SDK unity package from github . Import the .unitypackage into the Unity project. The examples may be imported or not, on your preference. Note ARCore as packaged is not in an assembly specialization. That is, it compiles into the predefined Assembly-CSharp.dll. Unfortunately, from the Unity documentation : Classes in assemblies created with an Assembly Definition cannot use types defined in the predefined assemblies. Therefore, in order for WLT to access and manage ARCore, ARCore must be moved into an Assembly Definition. This next step achieves that, by simply unpacking appropriate assembly definition (.asmdef) files onto the ARCore assets imported in the previous step. IMPORTANT: If the folder structure of the GoogleARCore assets is to be changed or renamed, first perform the following step. Import arcore-1.22.0-asmdef-fixup.unitypackage into your project. This unity package can be found in the Misc folder of this sample. It contains only assembly definition (.asmdef) files. Once the ARCore unitypackage and the fixup unitypackage have been imported, you may safely rename or move the GoogleARCore folder to match your organization. Ensure your build target is Android. In your project's Player Settings, in the XR section at the end, ensure that \"ARCore Supported\" is enabled. Adding WLT ARCore support to an existing project In addition to installing ARCore Unity SDK as described above, and of course installing WLT as described here , there are two additional steps in order to get WLT to target the ARCore SDK directly. First, the additional define of WLT_ARCORE_SDK_INCLUDED must be added to your project in Player Settings => Other Settings under the Android tab. Next, in the World Locking Context in the World Locking Manager prefab within your scene, in the Anchor Management settings, change the Anchor Subsystem to AR Core , as shown below. Note that you will need to uncheck the Use Defaults checkbox in order to change the subsystem type. Running the samples: Several sample scenes may be found in Assets/ARCoreSample/Scenes ARCoreWLT.unity This sample is the most elemental, the simplest possible application running WLT on top of ARCore. It does nothing but load a couple of cubes, which will remain fixed in physical space (contingent on tracking). Special controls: The sample includes the anchor graph visualization enabled. To disable WLT's anchor graph visualization, and get the truly simplest WLT on ARCore application possible, delete or disable the AnchorGraphVisual attached to the scene's WorldLocking object. Placement.unity This sample includes visualization of the found environment planes. Special controls: Tap the screen to place a coordinate frame representation where a ray cast intersects the environment's planes."
  },
  "Advanced/Mobile/ARCore/Assets/Packages/Microsoft.MixedReality.Unity.FrozenWorld.Engine.1.0.0/LICENSE.html": {
    "href": "Advanced/Mobile/ARCore/Assets/Packages/Microsoft.MixedReality.Unity.FrozenWorld.Engine.1.0.0/LICENSE.html",
    "title": "MICROSOFT SOFTWARE LICENSE TERMS | World Locking Tools Samples Documentation",
    "keywords": "MICROSOFT SOFTWARE LICENSE TERMS MICROSOFT FROZEN WORLD ENGINE V1.0.0 IF YOU LIVE IN (OR ARE A BUSINESS WITH YOUR PRINCIPAL PLACE OF BUSINESS IN) THE UNITED STATES, PLEASE READ THE “BINDING ARBITRATION AND CLASS ACTION WAIVER” SECTION BELOW. IT AFFECTS HOW DISPUTES ARE RESOLVED. These license terms are an agreement between you and Microsoft Corporation (or one of its affiliates). They apply to the software named above and any Microsoft services or software updates (except to the extent such services or updates are accompanied by new or additional terms, in which case those different terms apply prospectively and do not alter your or Microsoft’s rights relating to pre-updated software or services). IF YOU COMPLY WITH THESE LICENSE TERMS, YOU HAVE THE RIGHTS BELOW. BY USING THE SOFTWARE, YOU ACCEPT THESE TERMS. 1. INSTALLATION AND USE RIGHTS a) General You may install and use any number of copies of the software to develop and test your applications. b) Third Party Software The software may include third party applications that Microsoft, not the third party, licenses to you under this agreement. Any included notices for third party applications are for your information only. 2. DISTRIBUTABLE CODE The software may contain code you are permitted to distribute (i.e. make available for third parties) in applications you develop, as described in this Section. a) Distribution Rights The code and test files described below are distributable if included with the software. i. Third Party Distribution. You may permit distributors of your applications to copy and distribute any of this distributable code you elect to distribute with your applications. b) Distribution Requirements For any code you distribute, you must: i. add significant primary functionality to it in your applications; ii. require distributors and external end users to agree to terms that protect it and Microsoft at least as much as this agreement; and iii. indemnify, defend, and hold harmless Microsoft from any claims, including attorneys’ fees, related to the distribution or use of your applications, except to the extent that any claim is based solely on the unmodified distributable code. c) Distribution Restrictions You may not: i. use Microsoft’s trademarks or trade dress in your application in any way that suggests your application comes from or is endorsed by Microsoft; or ii. modify or distribute the source code of any distributable code so that any part of it becomes subject to any license that requires that the distributable code, any other part of the software, or any of Microsoft’s other intellectual property be disclosed or distributed in source code form, or that others have the right to modify it. 3. DATA COLLECTION The software may collect information about you and your use of the software and send that to Microsoft. Microsoft may use this information to provide services and improve Microsoft’s products and services. Your opt-out rights, if any, are described in the product documentation. Some features in the software may enable collection of data from users of your applications that access or use the software. If you use these features to enable data collection in your applications, you must comply with applicable law, including getting any required user consent, and maintain a prominent privacy policy that accurately informs users about how you use, collect, and share their data. You can learn more about Microsoft’s data collection and use in the product documentation and the Microsoft Privacy Statement at https://go.microsoft.com/fwlink/?LinkId=521839 . You agree to comply with all applicable provisions of the Microsoft Privacy Statement. 4. SCOPE OF LICENSE The software is licensed, not sold. Microsoft reserves all other rights. Unless applicable law gives you more rights despite this limitation, you will not (and have no right to): a) work around any technical limitations in the software that only allow you to use it in certain ways; b) reverse engineer, decompile or disassemble the software; c) remove, minimize, block, or modify any notices of Microsoft or its suppliers in the software; d) use the software in any way that is against the law or to create or propagate malware; or e) share, publish, distribute, or lend the software (except for any distributable code, subject to the terms above), provide the software as a stand-alone hosted solution for others to use, or transfer the software or this agreement to any third party. 5. EXPORT RESTRICTIONS You must comply with all domestic and international export laws and regulations that apply to the software, which include restrictions on destinations, end users, and end use. For further information on export restrictions, visit http://aka.ms/exporting . 6. SUPPORT SERVICES Microsoft is not obligated under this agreement to provide any support services for the software. Any support provided is “as is”, “with all faults”, and without warranty of any kind. 7. UPDATES The software may periodically check for updates, and download and install them for you. You may obtain updates only from Microsoft or authorized sources. Microsoft may need to update your system to provide you with updates. You agree to receive these automatic updates without any additional notice. Updates may not include or support all existing software features, services, or peripheral devices. 8. BINDING ARBITRATION AND CLASS ACTION WAIVER This Section applies if you live in (or, if a business, your principal place of business is in) the United States. If you and Microsoft have a dispute, you and Microsoft agree to try for 60 days to resolve it informally. If you and Microsoft can’t, you and Microsoft agree to binding individual arbitration before the American Arbitration Association under the Federal Arbitration Act (“FAA”), and not to sue in court in front of a judge or jury . Instead, a neutral arbitrator will decide. Class action lawsuits, class-wide arbitrations, private attorney-general actions, and any other proceeding where someone acts in a representative capacity are not allowed ; nor is combining individual proceedings without the consent of all parties. The complete Arbitration Agreement contains more terms and is at http://aka.ms/arb-agreement-1 . You and Microsoft agree to these terms. 9. ENTIRE AGREEMENT This agreement, and any other terms Microsoft may provide for supplements, updates, or third-party applications, is the entire agreement for the software. 10. APPLICABLE LAW AND PLACE TO RESOLVE DISPUTES If you acquired the software in the United States or Canada, the laws of the state or province where you live (or, if a business, where your principal place of business is located) govern the interpretation of this agreement, claims for its breach, and all other claims (including consumer protection, unfair competition, and tort claims), regardless of conflict of laws principles, except that the FAA governs everything related to arbitration. If you acquired the software in any other country, its laws apply, except that the FAA governs everything related to arbitration. If U.S. federal jurisdiction exists, you and Microsoft consent to exclusive jurisdiction and venue in the federal court in King County, Washington for all disputes heard in court (excluding arbitration). If not, you and Microsoft consent to exclusive jurisdiction and venue in the Superior Court of King County, Washington for all disputes heard in court (excluding arbitration). 11. CONSUMER RIGHTS; REGIONAL VARIATIONS This agreement describes certain legal rights. You may have other rights, including consumer rights, under the laws of your state or country. Separate and apart from your relationship with Microsoft, you may also have rights with respect to the party from which you acquired the software. This agreement does not change those other rights if the laws of your state or country do not permit it to do so. For example, if you acquired the software in one of the below regions, or mandatory country law applies, then the following provisions apply to you: a) Australia. You have statutory guarantees under the Australian Consumer Law and nothing in this agreement is intended to affect those rights. b) Canada. If you acquired this software in Canada, you may stop receiving updates by turning off the automatic update feature, disconnecting your device from the Internet (if and when you re-connect to the Internet, however, the software will resume checking for and installing updates), or uninstalling the software. The product documentation, if any, may also specify how to turn off updates for your specific device or software. c) Germany and Austria. i. Warranty. The properly licensed software will perform substantially as described in any Microsoft materials that accompany the software. However, Microsoft gives no contractual guarantee in relation to the licensed software. ii. Limitation of Liability. In case of intentional conduct, gross negligence, claims based on the Product Liability Act, as well as, in case of death or personal or physical injury, Microsoft is liable according to the statutory law. Subject to the foregoing clause ii., Microsoft will only be liable for slight negligence if Microsoft is in breach of such material contractual obligations, the fulfillment of which facilitate the due performance of this agreement, the breach of which would endanger the purpose of this agreement and the compliance with which a party may constantly trust in (so-called \"cardinal obligations\"). In other cases of slight negligence, Microsoft will not be liable for slight negligence. 12. DISCLAIMER OF WARRANTY THE SOFTWARE IS LICENSED “AS IS.” YOU BEAR THE RISK OF USING IT. MICROSOFT GIVES NO EXPRESS WARRANTIES, GUARANTEES, OR CONDITIONS. TO THE EXTENT PERMITTED UNDER APPLICABLE LAWS, MICROSOFT EXCLUDES ALL IMPLIED WARRANTIES, INCLUDING MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT. 13. LIMITATION ON AND EXCLUSION OF DAMAGES IF YOU HAVE ANY BASIS FOR RECOVERING DAMAGES DESPITE THE PRECEDING DISCLAIMER OF WARRANTY, YOU CAN RECOVER FROM MICROSOFT AND ITS SUPPLIERS ONLY DIRECT DAMAGES UP TO U.S. $5.00. YOU CANNOT RECOVER ANY OTHER DAMAGES, INCLUDING CONSEQUENTIAL, LOST PROFITS, SPECIAL, INDIRECT, OR INCIDENTAL DAMAGES. This limitation applies to (a) anything related to the software, services, content (including code) on third party Internet sites, or third party applications; and (b) claims for breach of contract, warranty, guarantee, or condition; strict liability, negligence, or other tort; or any other claim; in each case to the extent permitted by applicable law. It also applies even if Microsoft knew or should have known about the possibility of the damages. The above limitation or exclusion may not apply to you because your state, province, or country may not allow the exclusion or limitation of incidental, consequential, or other damages. Please note: As this software is distributed in Canada, some of the clauses in this agreement are provided below in French. Remarque: Ce logiciel étant distribué au Canada, certaines des clauses dans ce contrat sont fournies ci-dessous en français. EXONÉRATION DE GARANTIE. Le logiciel visé par une licence est offert « tel quel ». Toute utilisation de ce logiciel est à votre seule risque et péril. Microsoft n’accorde aucune autre garantie expresse. Vous pouvez bénéficier de droits additionnels en vertu du droit local sur la protection des consommateurs, que ce contrat ne peut modifier. La ou elles sont permises par le droit locale, les garanties implicites de qualité marchande, d’adéquation à un usage particulier et d’absence de contrefaçon sont exclues. LIMITATION DES DOMMAGES-INTÉRÊTS ET EXCLUSION DE RESPONSABILITÉ POUR LES DOMMAGES. Vous pouvez obtenir de Microsoft et de ses fournisseurs une indemnisation en cas de dommages directs uniquement à hauteur de 5,00 $ US. Vous ne pouvez prétendre à aucune indemnisation pour les autres dommages, y compris les dommages spéciaux, indirects ou accessoires et pertes de bénéfices. Cette limitation concerne: tout ce qui est relié au logiciel, aux services ou au contenu (y compris le code) figurant sur des sites Internet tiers ou dans des programmes tiers; et les réclamations au titre de violation de contrat ou de garantie, ou au titre de responsabilité stricte, de négligence ou d’une autre faute dans la limite autorisée par la loi en vigueur. Elle s’applique également, même si Microsoft connaissait ou devrait connaître l’éventualité d’un tel dommage. Si votre pays n’autorise pas l’exclusion ou la limitation de responsabilité pour les dommages indirects, accessoires ou de quelque nature que ce soit, il se peut que la limitation ou l’exclusion ci-dessus ne s’appliquera pas à votre égard. EFFET JURIDIQUE. Le présent contrat décrit certains droits juridiques. Vous pourriez avoir d’autres droits prévus par les lois de votre pays. Le présent contrat ne modifie pas les droits que vous confèrent les lois de votre pays si celles-ci ne le permettent pas."
  },
  "Advanced/QRSpacePins/QRSpacePins.html": {
    "href": "Advanced/QRSpacePins/QRSpacePins.html",
    "title": "QR Space Pins sample | World Locking Tools Samples Documentation",
    "keywords": "QR Space Pins sample Summary: The Space Pins feature of World Locking Tools is combined with QR code scanning to provide automatic snapping of a Unity scene to a physical environment. As the QR codes are physical features, this is an intrinsically shared experience. Project source assets https://github.com/microsoft/MixedReality-WorldLockingTools-Samples/tree/master/Advanced/QRSpacePins Dependencies: Built on WLT v1.0.0. Built with MRTK v2.4. QR code from NuGet package 0.5.2102. VCRTForwarders.140 (QR code dependency) from NuGet package 1.0.6. Built with Unity 2019.4.2f1. Requires HoloLens2 for QR code scanning. Additional setup: The QR code placement in the physical environment should match the QR code placement within the scene. For the virtual markers, look at objects \"HouseHold > BarnMarkers > Markers > QRCode_N\", where N is the integers 1 through 4. For example, consider the following configuration. Unity scene: The position of QRCode_1 is (0,0,0), and its orientation is horizontal with the top pointed along positive X. Physical environment: The printed QR code is at your feet, with the top pointed north. Result: The Unity scene will appear with the origin at your feet, and the positive X axis pointed north. Running the sample: Deploy the scene QRSpacePins.unity and start the application. Scan your printed QR codes by walking to them. The smaller the printed QR code the closer you'll need to get to it to scan it. A 5x5cm printed code will need to be within about 20 cm to scan. The codes can be scanned in any order. The scanned codes can be cleared at any time with the voice command \"Clear Space Pins\". You can then start over scanning. The 2nd scene QRSubScene is identical to QRSpacePins, with one significant exception. Whereas QRSpacePins aligns the entire Unity coordinate space to put the virtual QR codes at the physical QR markers, QRSubScene applies that transformation only to the root of the Household subtree of the scene graph. It accomplishes this using the AlignSubtree script placed on the Household node. See the AlignSubScene sample , which explores alignment of independent coordinate spaces with the physical world in greater detail. For further details on the AlignSubtree script, consult the World Locking Tools for Unity documentaton . Special controls: Speech commands: Command Result Clear Space Pins Resets all QR codes and pins to startup Toggle World Lock Toggles whether the World Locking Tools are active Known issues No QR codes scanned on first run The first time running the application after initial deployment, the enumeration of the QR watcher never completes. This means no QR codes are ever scanned. Closing the application and running a second time fixes the problem, and the 2nd run and thereafter QR codes scan fine. This is probably an issue with the permissions setup on the first run, but since it is a QR scanning issue, and not related to world-locking, it hasn't been a priority to track down. Tracked as issue #20 ."
  },
  "CODE_OF_CONDUCT.html": {
    "href": "CODE_OF_CONDUCT.html",
    "title": "Microsoft Open Source Code of Conduct | World Locking Tools Samples Documentation",
    "keywords": "Microsoft Open Source Code of Conduct This project has adopted the Microsoft Open Source Code of Conduct . Resources: Microsoft Open Source Code of Conduct Microsoft Code of Conduct FAQ Contact opencode@microsoft.com with questions or concerns"
  },
  "CONTRIBUTING.html": {
    "href": "CONTRIBUTING.html",
    "title": "Contributing | World Locking Tools Samples Documentation",
    "keywords": "Contributing Contributing ideas Suggestions for further samples, fixes for the current samples, clarification of documentation, or extension of the samples included are all very welcome. You are, of course, free and encouraged to develop your own samples as well. Be aware that there are restrictions on what samples can be hosted as part of this site, so if your sole intention is to put a sample here, it's best to check (by issuing a proposal ) first before investing a lot of time. But if you have made something you think others might find useful, we would be happy to have a look. See the guidelines below for a smoother experience for yourself and reviewers. Contributing samples The most stringent requirement on samples is that they are well documented. Any scripts should be clear, with docfx compliant comments. This generally just means following C#'s XML code documentation practices , which many would say you should be doing anyway. Further, a detailed writeup should accompany the sample, as a markdown file in the sample's project root. For example, if your sample is in Advanced/NicelyDone, then you should have accompanying documentation in Advanced/NicelyDone/NicelyDone.md. Other supporting documentation you wish to include can be placed in the same folder as the markdown file. Images may be placed in a subfolder of DocGen/Images. At a minimum, the documentation markdown file should include all of the information in this template . Submitting a Pull Request In general, working from a fork of the repo is preferable over just creating a feature branch. But we all try to remain flexible in our workflows. Once you have a cleaned up working sample and appropriate documentation, you can submit a pull request for it to be merged into the master branch. Any pull request will require review before acceptance. Depending on the complexity of your contribution, and the clarity of the code and documentation, as well as the current workload of potential reviewers, the time for review may vary widely. Every effort will be made to provide feedback within 48 hours of submission. If you've had no response within a week, it is perfectly reasonable to reach out to one of the administrators to check the status. Additional notes This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.opensource.microsoft.com . When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA. This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments."
  },
  "DocGen/Documentation/Introduction.html": {
    "href": "DocGen/Documentation/Introduction.html",
    "title": "Introduction | World Locking Tools Samples Documentation",
    "keywords": "Introduction About the Samples Each sample is a self-contained Unity project. While that introduces a lot of redundancy between samples, it means that you don't have to wonder if something in a project is necessary. If the sample within that project doesn't use QR code scanning, then the QR code NuGet package won't be installed in that project. General samples covering many scenarios can be found in the main WLT repo. This sibling repository allows the extension of sample coverage without bloating out the main repository. Grouping The samples can be thought of as forming two groups. The first group is for very basic and slimmed down scenarios. The main repo's project can't show what a project looks like without adding the WorldLocking.Tools package because the Tools are, of course, included in that project. This limits some of the tutorials we would like to cover. The second group is for advanced scenarios. More advanced usages often leverage the World Locking Tools capabilities to amplify the value from other, independent software and services. While these services might be only a NuGet feed away, bloating the core WLT repo with every NuGet package that might be useful for a sample is a frightening prospect. Organization The two groups of samples are distributed in this repository as shown. This table will be updated as new Samples come online. Links to documentation for each is included in the table. Each sample contains enough documentation to run it, along with enough conceptual background to understand what it is doing, and enough motivational background to understand why one might be inclined to do so. Folder Project Description Tutorials Projects slimmed down to make a single point. Minimal The minimal setup of WLT to world-lock an application. Advanced Complex projects, often leveraging external dependencies. AlignSubScene Aligning multiple independent spaces. QRSpacePins QR codes as external alignment markers."
  },
  "DocGen/Documentation/NOTICE.html": {
    "href": "DocGen/Documentation/NOTICE.html",
    "title": "| World Locking Tools Samples Documentation",
    "keywords": "NOTICES AND INFORMATION Do Not Translate or Localize This software incorporates material from third parties. Microsoft makes certain open source code available at http://3rdpartysource.microsoft.com , or you may send a check or money order for US $5.00, including the product name, the open source component name, and version number, to: Source Code Compliance Team Microsoft Corporation One Microsoft Way Redmond, WA 98052 USA Notwithstanding any other terms, you may reverse engineer this software to the extent required to debug changes to any libraries licensed under the GNU Lesser General Public License. Oculus Controller Images Copyright (c) Facebook Technologies, LLC and its affiliates. All rights reserved. Art Attribution License 1.0 You may use these images solely for referring to the corresponding product in your video game or VR experience (including manuals for users). Otherwise, you may not use these images, or any trademarks, logos or other intellectual property owned by Facebook Technologies, LLC formerly known as Oculus VR, LLC (“Oculus”), including but not limited to use on merchandise or other product such as clothing, hats, or mugs. Do not use the Oculus images in a way that implies a partnership, sponsorship or endorsement; or features Oculus on materials associated with pornography, illegal activities, or other materials that violate Oculus Terms. THE IMAGES ARE PROVIDED TO YOU ON AN “AS IS” BASIS AND YOU ARE SOLELY RESPONSIBLE FOR YOUR USE OF THE IMAGES. OCULUS DISCLAIMS ALL WARRANTIES REGARDING THE IMAGES, INCLUDING WARRANTIES OF NON-INFRINGEMENT. OCULUS SHALL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, CONSEQUENTIAL OR PUNITIVE DAMAGES ARISING FROM OR RELATED TO YOUR USE OF THE IMAGES. For the avoidance of doubt, this license shall not apply to the Oculus name, trademark or service mark, logo or design OpenVR Copyright (c) 2015 Valve Corporation. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Unity 3D Async Await Util Copyright (c) 2016 Modest Tree Media Inc Licensed under the MIT License. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Visual Profiler Copyright (c) Microsoft Corporation. All rights reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE"
  },
  "DocGen/Documentation/SampleDocTemplate.html": {
    "href": "DocGen/Documentation/SampleDocTemplate.html",
    "title": "Title of this very instructive sample | World Locking Tools Samples Documentation",
    "keywords": "Title of this very instructive sample Summary: This is demonstrated, highlighting that. Dependencies: Built on WLT version ???. Built with MRTK version ??? (if included). Any additional libraries pulled in via NuGet etc, including version. Additional setup: Any modifications to the code or assets needed in order to build, deploy, and run on someone elses machine. Running the sample: Brief walk through of: Startup – where are you? Next steps – how do you get to the good stuff? Conclusion – what should you have experienced? Special controls: Any speech commands, UX, etc. What does one need to know to fully experience the sample?"
  },
  "DocGen/SourceDoc/SourceReference.html": {
    "href": "DocGen/SourceDoc/SourceReference.html",
    "title": "Source code reference documentation | World Locking Tools Samples Documentation",
    "keywords": "Source code reference documentation Find reference material generated from source code comments for the sample applications here. Sample code reference . World Locking Tools source code reference ."
  },
  "DocGen/Temp/api/ARCoreTest.html": {
    "href": "DocGen/Temp/api/ARCoreTest.html",
    "title": "Namespace ARCoreTest | World Locking Tools Samples Documentation",
    "keywords": "Namespace ARCoreTest Classes PlaceObject"
  },
  "DocGen/Temp/api/ARCoreTest.PlaceObject.html": {
    "href": "DocGen/Temp/api/ARCoreTest.PlaceObject.html",
    "title": "Class PlaceObject | World Locking Tools Samples Documentation",
    "keywords": "Class PlaceObject Inheritance Object PlaceObject Namespace : ARCoreTest Assembly : cs.temp.dll.dll Syntax public class PlaceObject : MonoBehaviour Fields prefabScale Declaration public float prefabScale Field Value Type Description Single prefabToPlace Declaration public GameObject prefabToPlace Field Value Type Description GameObject"
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.Advanced.AlignSubScene.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.Advanced.AlignSubScene.html",
    "title": "Namespace Microsoft.MixedReality.WorldLocking.Samples.Advanced.AlignSubScene | World Locking Tools Samples Documentation",
    "keywords": "Namespace Microsoft.MixedReality.WorldLocking.Samples.Advanced.AlignSubScene Classes PlantPlacard Simple script to instantiate and place a prefab in the scene where tapped. If the air tap hits a previously placed object, it will be deleted."
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.Advanced.AlignSubScene.PlantPlacard.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.Advanced.AlignSubScene.PlantPlacard.html",
    "title": "Class PlantPlacard | World Locking Tools Samples Documentation",
    "keywords": "Class PlantPlacard Simple script to instantiate and place a prefab in the scene where tapped. If the air tap hits a previously placed object, it will be deleted. Inheritance Object PlantPlacard Implements IMixedRealityPointerHandler Namespace : Microsoft.MixedReality.WorldLocking.Samples.Advanced.AlignSubScene Assembly : cs.temp.dll.dll Syntax public class PlantPlacard : InputSystemGlobalHandlerListener, IMixedRealityPointerHandler Remarks This script assumes the prefab is of the layer \"Pillared\". Anything of layer \"Pillared\" will be considered to have been added by this script, and hence removed if tapped. Fields placardPrefab The prefab to instantiate and place in the scene. Declaration public GameObject placardPrefab Field Value Type Description GameObject Methods OnPointerClicked(MixedRealityPointerEventData) Process pointer clicked event if ray cast has result. Declaration public void OnPointerClicked(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData OnPointerDown(MixedRealityPointerEventData) No-op on pointer down. Declaration public void OnPointerDown(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData OnPointerDragged(MixedRealityPointerEventData) No-op on pointer drag. Declaration public void OnPointerDragged(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData OnPointerUp(MixedRealityPointerEventData) No-op on pointer up. Declaration public void OnPointerUp(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData RegisterHandlers() Declaration protected override void RegisterHandlers() Start() Cache our layers at start. Declaration protected override void Start() TestLayer(GameObject, Int32) Declaration public static bool TestLayer(GameObject go, int layerTest) Parameters Type Name Description GameObject go Int32 layerTest Returns Type Description Boolean UnregisterHandlers() Declaration protected override void UnregisterHandlers() Implements IMixedRealityPointerHandler"
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins.html",
    "title": "Namespace Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins | World Locking Tools Samples Documentation",
    "keywords": "Namespace Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins Classes QRCodeMiniManager The QRCodeMiniManager is a simple wrapper around the Microsoft.MixedReality.QR.QRCodeWatcher, to reissue qr code events on the main thread, where they can be acted on safely. QRSpacePinGroup A group of space pins with locations fed by reading QR codes placed in the physical environment. QRSpatialCoord Wrapper class for SpatialCoordinateSystem. ShowMarker Simple animation to highlight where a QR code has been scanned. Delegates QRCodeMiniManager.QRCodeFunction Notification callback for a QRCode event."
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins.QRCodeMiniManager.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins.QRCodeMiniManager.html",
    "title": "Class QRCodeMiniManager | World Locking Tools Samples Documentation",
    "keywords": "Class QRCodeMiniManager The QRCodeMiniManager is a simple wrapper around the Microsoft.MixedReality.QR.QRCodeWatcher, to reissue qr code events on the main thread, where they can be acted on safely. Inheritance Object QRCodeMiniManager Namespace : Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins Assembly : cs.temp.dll.dll Syntax public class QRCodeMiniManager : MonoBehaviour Remarks The events are slightly simplified to the uniform pattern of the void QRCodeFunction(qrCode) defined here. No other interpretation or processing of the events is done. Events are received (on another thread) from the QRCodeWatcher, then reissued on the main thread in the next Update loop. Note that since they are received asynchronously, no exact guarantees can be made about the order in which they are called on the main thread. But in general (and in best effort) they will be called in the order in which the asynchronous events are dispatched, and on the next Update after the events are originally invoked. Properties IsSupported Get accessor for whether QRCodeWatcher reports as supported. Declaration public bool IsSupported { get; } Property Value Type Description Boolean OnQRAdded Callback when a new QR code is added. Declaration public QRCodeMiniManager.QRCodeFunction OnQRAdded { get; set; } Property Value Type Description QRCodeMiniManager.QRCodeFunction OnQREnumerated Callback when the enumeration is complete. Declaration public QRCodeMiniManager.QRCodeFunction OnQREnumerated { get; set; } Property Value Type Description QRCodeMiniManager.QRCodeFunction Remarks Cached QR codes will have Added and Updated events BEFORE the enumeration complete. Newly seen QR codes will only start to appear after the enumeration complete event. https://github.com/chgatla-microsoft/QRTracking/issues/2 OnQRRemoved Callback when a previously added QR code is removed. Declaration public QRCodeMiniManager.QRCodeFunction OnQRRemoved { get; set; } Property Value Type Description QRCodeMiniManager.QRCodeFunction OnQRUpdated Callback when a previously added QR code is updated. Declaration public QRCodeMiniManager.QRCodeFunction OnQRUpdated { get; set; } Property Value Type Description QRCodeMiniManager.QRCodeFunction"
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins.QRCodeMiniManager.QRCodeFunction.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins.QRCodeMiniManager.QRCodeFunction.html",
    "title": "Delegate QRCodeMiniManager.QRCodeFunction | World Locking Tools Samples Documentation",
    "keywords": "Delegate QRCodeMiniManager.QRCodeFunction Notification callback for a QRCode event. Namespace : Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins Assembly : cs.temp.dll.dll Syntax public delegate void QRCodeFunction(QRCode qrCode); Parameters Type Name Description QRCode qrCode The code generating the event. Remarks Note that for the enumeration complete event, qrCode parameter is always null."
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins.QRSpacePinGroup.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins.QRSpacePinGroup.html",
    "title": "Class QRSpacePinGroup | World Locking Tools Samples Documentation",
    "keywords": "Class QRSpacePinGroup A group of space pins with locations fed by reading QR codes placed in the physical environment. Inheritance Object QRSpacePinGroup Namespace : Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins Assembly : cs.temp.dll.dll Syntax public class QRSpacePinGroup : MonoBehaviour Properties MarkerHighlightPrefab Optional visual to draw at QR code position when detected. Declaration public GameObject MarkerHighlightPrefab { get; set; } Property Value Type Description GameObject SharedOrienter An orienter instance in the scene. If unset, one will be created. Declaration public Orienter SharedOrienter { get; set; } Property Value Type Description Orienter VirtualMarkers The virtual poses in the scene to be matched with the poses of the QR codes in the physical world. Declaration public List<Transform> VirtualMarkers { get; set; } Property Value Type Description List < Transform > Methods Reset() Clear back to the state before any QR codes had been detected. Declaration public void Reset()"
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins.QRSpatialCoord.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins.QRSpatialCoord.html",
    "title": "Class QRSpatialCoord | World Locking Tools Samples Documentation",
    "keywords": "Class QRSpatialCoord Wrapper class for SpatialCoordinateSystem. Inheritance Object QRSpatialCoord Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins Assembly : cs.temp.dll.dll Syntax public class QRSpatialCoord Remarks Provides a transform of the QR code's pose into Spongy space. Properties CurrentPose The last computed pose. Declaration public Pose CurrentPose { get; } Property Value Type Description Pose SpatialNodeId Accessor for spatial node id. Declaration public Guid SpatialNodeId { get; set; } Property Value Type Description Guid Methods ComputePose(out Pose) Compute the head relative pose for the spatial node id. Declaration public bool ComputePose(out Pose pose) Parameters Type Name Description Pose pose If return value is true, the newly computed pose, else the last pose computed. Returns Type Description Boolean True if a new pose was successfully computed. Remarks This ultimately relies on SpatialCoordinateSystem.TryGetTransformTo. TryGetTransformTo seems to fail for a while after the QR code is created. Or maybe just spurious failure. Haven't found any documentation on behavior so far. Main thing is to be prepared for failure, and just try back until success."
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins.ShowMarker.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins.ShowMarker.html",
    "title": "Class ShowMarker | World Locking Tools Samples Documentation",
    "keywords": "Class ShowMarker Simple animation to highlight where a QR code has been scanned. Inheritance Object ShowMarker Namespace : Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins Assembly : cs.temp.dll.dll Syntax public class ShowMarker : MonoBehaviour Fields maxSize Maximum scale factor to apply, i.e. scale at end of ramp up and beginning of ramp down. Declaration public float maxSize Field Value Type Description Single rampDown Declaration public float rampDown Field Value Type Description Single rampUp Declaration public float rampUp Field Value Type Description Single"
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.html",
    "title": "Namespace Microsoft.MixedReality.WorldLocking.Samples | World Locking Tools Samples Documentation",
    "keywords": "Namespace Microsoft.MixedReality.WorldLocking.Samples Classes SimpleTagalong UX Simple bit of UX to toggle and display the status of the WorldLockingManager."
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.SimpleTagalong.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.SimpleTagalong.html",
    "title": "Class SimpleTagalong | World Locking Tools Samples Documentation",
    "keywords": "Class SimpleTagalong Inheritance Object SimpleTagalong Namespace : Microsoft.MixedReality.WorldLocking.Samples Assembly : cs.temp.dll.dll Syntax public class SimpleTagalong : MonoBehaviour Fields lerpTime Declaration public float lerpTime Field Value Type Description Single maxAngle Declaration public float maxAngle Field Value Type Description Single"
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.UX.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.UX.html",
    "title": "Class UX | World Locking Tools Samples Documentation",
    "keywords": "Class UX Simple bit of UX to toggle and display the status of the WorldLockingManager. Inheritance Object UX Namespace : Microsoft.MixedReality.WorldLocking.Samples Assembly : cs.temp.dll.dll Syntax public class UX : MonoBehaviour Fields statusText Declaration public TextMesh statusText Field Value Type Description TextMesh targets Declaration public List<GameObject> targets Field Value Type Description List < GameObject > Methods OnToggleManager() Declaration public void OnToggleManager()"
  },
  "README.html": {
    "href": "README.html",
    "title": "WLT Samples | World Locking Tools Samples Documentation",
    "keywords": "WLT Samples The World Locking Tools - Samples (WLT-S) repository hopes to give you isolated independent examples, or even starting points, for anything you might do with the World Locking Tools for Unity. Useful links This documentation on github.io World Locking Tools Samples github repo . Getting started with Samples . World Locking Tools for Unity (WLT) github repo . World Locking Tools for Unity (WLT) documentation landing page . Prerequisites The basics of building and deploying a HoloLens application from Unity are assumed. If you aren't familiar with that, here's a good place to start . Or if you want to go straight to HoloLens2, then here . For the Advanced samples, obviously familiarity with the basic World Locking Tools for Unity is assumed. Start here . The Tutorials are most useful as auxiliary information for the documentation. Start with the documentation, and jump to the Tutorials when the documentation directs you there for illustration. Contributing in plain language. Some simple talk about contributing to this project . Contributing This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.opensource.microsoft.com . When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA. This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments."
  },
  "SECURITY.html": {
    "href": "SECURITY.html",
    "title": "Security | World Locking Tools Samples Documentation",
    "keywords": "Security <!-- BEGIN MICROSOFT SECURITY.MD V0.0.3 BLOCK --> Microsoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include Microsoft , Azure , DotNet , AspNet , Xamarin , and our GitHub organizations . If you believe you have found a security vulnerability in any Microsoft-owned repository that meets Microsoft's Microsoft's definition of a security vulnerability of a security vulnerability, please report it to us as described below. Reporting Security Issues Please do not report security vulnerabilities through public GitHub issues. Instead, please report them to the Microsoft Security Response Center (MSRC) at https://msrc.microsoft.com/create-report . If you prefer to submit without logging in, send email to secure@microsoft.com . If possible, encrypt your message with our PGP key; please download it from the the Microsoft Security Response Center PGP Key page . You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at microsoft.com/msrc . Please include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue: Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.) Full paths of source file(s) related to the manifestation of the issue The location of the affected source code (tag/branch/commit or direct URL) Any special configuration required to reproduce the issue Step-by-step instructions to reproduce the issue Proof-of-concept or exploit code (if possible) Impact of the issue, including how an attacker might exploit the issue This information will help us triage your report more quickly. If you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our Microsoft Bug Bounty Program page for more details about our active programs. Preferred Languages We prefer all communications to be in English. Policy Microsoft follows the principle of Coordinated Vulnerability Disclosure . <!-- END MICROSOFT SECURITY.MD BLOCK -->"
  },
  "Tutorial/01_Minimal/01_Minimal.html": {
    "href": "Tutorial/01_Minimal/01_Minimal.html",
    "title": "Minimal World Locking Tools (WLT) setup for a world-locked application | World Locking Tools Samples Documentation",
    "keywords": "Minimal World Locking Tools (WLT) setup for a world-locked application This Tutorial will walk you through adding the minimum required subset of the WLT to a project, in order to get world-locked behavior out of all the content in that application, without the need for application maintained WorldAnchors, or any other special behavior. This tutorial refers to the 01_Minimal sample for reference, but the same steps would apply when adding to any existing project. The simple application being world-locked here is the simplest possible Unity AR application. Note that the setup is even simpler for MRTK applications. Any differences between adding to a bare versus MRTK app are noted in the steps. For tips on getting started with HoloLens development, see the final section of this article. Project source assets https://github.com/microsoft/MixedReality-WorldLockingTools-Samples/tree/master/Tutorial/01_Minimal World Locking Tools specific setup Add an Adjustment node, and attach the Main Camera object to it. It should look like this: Or, if using MRTK, like this: Install the FrozenWorld Engine DLL. a. Install NuGet for Unity . It's really a phenomenal piece of technology, you should have it anyway. If for any reason you can't use NuGet for Unity, follow the steps for Manual FrozenWorld Engine DLL Installation , and proceed to step 3. b. With NuGet for Unity installed, in Unity, go to NuGet > Manage NuGet Packages Search for FrozenWorld.Engine, and install the latest version of Microsoft.MixedReality.Unity.FrozenWorld.Engine. Download and import the latest version of the Microsoft.MixedReality.Unity.WorldLockingTools.CoreEngine unity package from releases . In your Unity Project, go to Assets > WorldLocking.Core > Prefabs Drag the WorldLockingManager prefab into your scene. At this point your project should look a lot like 01_Minimal . A few visual reference points (colored capsules) have been added to the MinimalScene in 01_Minimal , just so you can see that it is working (the capsules remain fixed relative to real world features around them during the session, and even persisting across sessions). Bonus round - adding anchor graph visualization The application as-is will now do basic world locking. Any objects you add to the scene will be placed in the physical world relative to the head position on first running the application. They will then remain in fixed pose relative to the physical world through the session, and even across sessions. That's all your application requires for basic world-locking. It can be useful to visualize the world anchor graph which the World Locking Tools creates and maintains as the underlying stabilization structure. Doing so is quite easy. Download and import the version of Microsoft.MixedReality.Unity.WorldLockingTools.Tools which corresponds with the CoreEngine package you previously imported. In your Unity Project, go to Assets > WorldLocking.Tools > Prefabs Drag the AnchorGraphVisual prefab into your scene. At this point it can be helpful to create a WorldLocking empty object in your scene and attach your WorldLockingManager and your AnchorGraphVisual objects to it. There is no functional impact, but it helps avoid cluttering up your scene. That's it. Now when you deploy, you will see the graph of WorldAnchor nodes created under the hood, along with some other helpful visualizations. More description is available in the Tools documentation . When you decide you don't need the visualizations anymore, you can either disable the AnchorGraphVisual in the scene or delete it. Assumed HoloLens deployment background If unfamiliar with building, deploying, and running applications on the HoloLens family of devices, a good place to start is with HoloLens and HoloLens 2 tutorials. In addition, here are some emphasized tips common to all HoloLens development. Note that these are handled automatically by MRTK. Check the camera clear color. The Clear Flags should be \"Solid Color\", and the color should be transparent black (0,0,0,0). Check permissions. Project Settings > Player > Publishing Settings > Capabilities You generally want the following enabled: InternetClient InternetClientServer PrivateNetworkClientServer WebCam Microphone GazeInput Make it a MR app. Go to Project Settings > Player > XR Settings (make sure you're on the UWP tab). Click Virtual Reality Supported Add Windows Mixed Reality to Virtual Reality SDKs Optionally set Depth Format to 16-bit."
  },
  "Tutorial/Tutorial.html": {
    "href": "Tutorial/Tutorial.html",
    "title": "Tutorials | World Locking Tools Samples Documentation",
    "keywords": "Tutorials This section of the Samples holds stripped down simplified projects, each highlighting a single concept. Applications built from the projects in the Tutorials section don't generally don't accomplish anything useful or complex, but serve as supplemental material for the documentation. See also Minimal - The minimal set of World Locking Tools introduced into a project to do basic world-locking."
  }
}